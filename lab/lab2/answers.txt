1.
Although the expected answer is "0xdfffffffdceaced0" or "-2305843009802285360", 
we end up getting a value of "2305843008625102544" instead. This is confirmed 
by looking at the registers. However, elisp only allows a maximum int/long 
value of 62 bits. Thus we get "0x1fffffffdceaced0" or "2305843008625102544". I 
believe this is handled done via the follow source code snippets. (Code is not 
in original order.)
#define GCTYPEBITS 3
INTTYPEBITS = GCTYPEBITS - 1
i = u << INTTYPEBITS;
return i >> INTTYPEBITS;

2.
This number comes from the fact that elisp has a maximum int/long 
representation of 62 bits. The most-negative-fixnum is "-2305843009213693952" 
or "0xe000000000000000".
#define MOST_POSITIVE_FIXNUM (EMACS_INT_MAX >> INTTYPEBITS)
#define MOST_NEGATIVE_FIXNUM (-1 - MOST_POSITIVE_FIXNUM)
i = u << INTTYPEBITS;
return i >> INTTYPEBITS;

3.
This number comes from the fact that the result of this expression overflows 
and evaluates to "-9223372036854775807" or "0x8000000000000001". As before, the 
top two bits are removed and thus we end up with "1" or "0x0000000000000001". 

4. It is likely that there would be errors or at the very least unexpected 
behaviors. "-O2" optimizes a lot of the code and does not assume that overflows 
will wrap around using twos-complement. Consider the example below. Under 
"-O2", the compiler creates assembly code tha always returns 1. However, under 
"-fwrapv", the compiler will no longer make that assumption and allow for the 
result to overflow. 